<Window x:Class="SonoCap.MES.UI.Views.TestingView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:models="clr-namespace:SonoCap.MES.Models.Enums;assembly=Sonocap.MES.Models"
        xmlns:views="clr-namespace:SonoCap.MES.UI.Views"
        xmlns:services="clr-namespace:SonoCap.MES.UI.Services"
        xmlns:behaviors="clr-namespace:SonoCap.MES.UI.Behaviors"
        xmlns:converter="clr-namespace:SonoCap.MES.UI.Converters"
        xmlns:vm="clr-namespace:SonoCap.MES.UI.ViewModels" 
        xmlns:controls="clr-namespace:SonoCap.MES.UI.Controls"
        mc:Ignorable="d"
        WindowState="Maximized"
        d:DataContext="{d:DesignInstance Type={x:Type vm:TestingViewModel}}"
        Title="{Binding Title}" Height="1080" Width="1920">
    <Window.Resources>

    </Window.Resources>
    <!--<Window.InputBindings>
        <KeyBinding Key="Enter" Command="{Binding KeyDownCommand}"/>
    </Window.InputBindings>-->
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="KeyDown">
            <b:InvokeCommandAction Command="{Binding KeyDownCommand}" PassEventArgsToCommand="True">
            </b:InvokeCommandAction>
        </b:EventTrigger>
    </b:Interaction.Triggers>
    <Grid x:Name="MainGrid" Margin="15">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="1*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="1*"/>
        </Grid.RowDefinitions>
        <!-- 중앙에 표시될 Popup -->
        <Popup x:Name="popupMessage"
               Width="200"
               Height="100"
               AllowsTransparency="True"
               PopupAnimation="Fade"
               HorizontalAlignment="Center"
               VerticalAlignment="Center"
               Placement="Center"
               PlacementTarget="{Binding ElementName=MainGrid}"
               IsOpen="{Binding MessageIsPopupOpen}">
            <Grid Background="Transparent">
                <!-- 배경을 투명으로 설정 -->
                <Border Background="LightGray" CornerRadius="50" Opacity="0.5">
                    <TextBlock Text="{Binding Path=Message}" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="20"/>
                </Border>
            </Grid>
        </Popup>
        <GroupBox Style="{StaticResource RemoveGroupBoxBorder}" Header="" Grid.Row="0">
            <Grid Margin="0,20,0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="2*"/>
                    <ColumnDefinition Width="1*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                <Label Style="{StaticResource LabelMediumStyle}" Grid.Row="0" Grid.Column="1" Content="TD Sn"/>
                <Label Style="{StaticResource LabelMediumStyle}" Grid.Row="2" Grid.Column="1" Content="TD Md Sn"/>
                <Label Style="{StaticResource LabelMediumStyle}" Grid.Row="4" Grid.Column="1" Content="Probe Sn"/>

                <controls:TextBoxControl x:Name="TDSn" Grid.Row="0" Grid.Column="2" FontSize="20" Validating="{Binding ValidationDict[TDSn].IsValid}" Text="{Binding TDSn}" IsEnabled="{Binding ValidationDict[TDSn].IsEnabled}" WaterMarkText="{Binding ValidationDict[TDSn].WaterMarkText}" >
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="PreviewKeyDown">
                            <b:InvokeCommandAction Command="{Binding TDSnKeyDownCommand}" PassEventArgsToCommand="True"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </controls:TextBoxControl>
                <Popup PlacementTarget="{Binding ElementName=TDSn}"
                IsEnabled="True"
                Placement="Bottom"
                StaysOpen="False"
                IsOpen="{Binding TDSnIsPopupOpen}">
                    <ListBox ItemsSource="{Binding TDSnFilteredItems}"
                        IsSynchronizedWithCurrentItem="True"
                        SelectedIndex="{Binding TDSnSelectedIndex}"
                        KeyboardNavigation.DirectionalNavigation="Contained">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="MouseDoubleClick">
                                <b:InvokeCommandAction Command="{Binding TDSnFilteredItemsMouseDoubleClickCommand}"
CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}, Mode=FindAncestor}}" PassEventArgsToCommand="True"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                        <ListBox.Style>
                            <Style TargetType="{x:Type ListBox}">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                                <Setter Property="FontSize" Value="20"/>
                            </Style>
                        </ListBox.Style>
                    </ListBox>
                </Popup>
                <TextBlock Grid.Row="1" Grid.Column="2" FontSize="20" Foreground="Tomato" Margin="5,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding ValidationDict[TDSn].Message}" Visibility="{Binding ValidationDict[TDSn].IsEnabled, Converter={StaticResource EnabledToVisibilityConverter}}"/>


                <controls:TextBoxControl x:Name="TDMdSn" Grid.Row="2" Grid.Column="2" FontSize="20" Validating="{Binding ValidationDict[TDMdSn].IsValid}" Text="{Binding TDMdSn}" IsEnabled="{Binding ValidationDict[TDMdSn].IsEnabled}" WaterMarkText="{Binding ValidationDict[TDMdSn].WaterMarkText}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="PreviewKeyDown">
                            <b:InvokeCommandAction Command="{Binding TDMdSnKeyDownCommand}" PassEventArgsToCommand="True"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </controls:TextBoxControl>
                <Popup PlacementTarget="{Binding ElementName=TDMdSn}"
                Placement="Bottom"
                StaysOpen="False"
                IsOpen="{Binding TDMdSnIsPopupOpen}">
                    <ListBox ItemsSource="{Binding TDMdSnFilteredItems}"
                        IsSynchronizedWithCurrentItem="True"
                        SelectedIndex="{Binding TDMdSnSelectedIndex, Mode=TwoWay}"
                        KeyboardNavigation.DirectionalNavigation="Contained">
                        <ListBox.Style>
                            <Style TargetType="{x:Type ListBox}">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                            </Style>
                        </ListBox.Style>
                    </ListBox>
                </Popup>
                <TextBlock Grid.Row="3" Grid.Column="2" FontSize="20" Foreground="Tomato" Margin="5,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding ValidationDict[TDMdSn].Message}" Visibility="{Binding ValidationDict[TDMdSn].IsEnabled, Converter={StaticResource EnabledToVisibilityConverter}}"/>


                <controls:TextBoxControl x:Name="ProbeSn" Grid.Row="4" Grid.Column="2" FontSize="20" Validating="{Binding ValidationDict[ProbeSn].IsValid}" Text="{Binding ProbeSn}" IsEnabled="{Binding ValidationDict[ProbeSn].IsEnabled}" WaterMarkText="{Binding ValidationDict[ProbeSn].WaterMarkText}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="PreviewKeyDown">
                            <b:InvokeCommandAction Command="{Binding ProbeSnKeyDownCommand}" PassEventArgsToCommand="True"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </controls:TextBoxControl>
                <Popup PlacementTarget="{Binding ElementName=ProbeSn}"
                Placement="Bottom"
                StaysOpen="False"
                IsOpen="{Binding ProbeSnIsPopupOpen}">
                    <ListBox ItemsSource="{Binding ProbeSnFilteredItems}"
                        IsSynchronizedWithCurrentItem="True"
                        SelectedIndex="{Binding ProbeSnSelectedIndex}"
                        KeyboardNavigation.DirectionalNavigation="Contained">
                        <ListBox.Style>
                            <Style TargetType="{x:Type ListBox}">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                            </Style>
                        </ListBox.Style>
                    </ListBox>
                </Popup>
                <TextBlock Grid.Row="5" Grid.Column="2" FontSize="20" Foreground="Tomato" Margin="5,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding ValidationDict[ProbeSn].Message}" Visibility="{Binding ValidationDict[ProbeSn].IsEnabled, Converter={StaticResource EnabledToVisibilityConverter}}"/>
            </Grid>
        </GroupBox>
        
        <GroupBox Grid.Row="1" Style="{StaticResource GroupBoxLargeStyle}" Header="검사 현황" Margin="0" VerticalAlignment="Top" Height="320" Width="auto">
            <Grid Margin="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="1*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="1*"/>
                    <RowDefinition Height="1.5*"/>
                    <RowDefinition Height="1.5*"/>
                    <RowDefinition Height="1.5*"/>
                </Grid.RowDefinitions>

                <Border Grid.Column="0" Grid.Row="0" Background="{StaticResource CellHeaderBrush}"/>
                <Border Grid.Column="1" Grid.Row="0" Background="{StaticResource CellHeaderBrush}">
                    <TextBlock Text="Align" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="1" Grid.Row="0"/>
                </Border>
                <Border Grid.Column="2" Grid.Row="0" Background="{StaticResource CellHeaderBrush}">
                    <TextBlock Text="Axial" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="2" Grid.Row="0"/>
                </Border>
                <Border Grid.Column="3" Grid.Row="0" Background="{StaticResource CellHeaderBrush}">
                    <TextBlock Text="Leteral" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="3" Grid.Row="0"/>
                </Border>
                <Border Grid.Column="4" Grid.Row="0" Background="{StaticResource CellHeaderBrush}">
                    <TextBlock Text="강제 검수" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="4" Grid.Row="0"/>
                </Border>

                <Border Grid.Column="0" Grid.Row="1" Background="{StaticResource CellHeaderBrush}">
                    <TextBlock Text="공정용" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="0" Grid.Row="1"/>
                </Border>
                <Border Grid.Column="1" Grid.Row="1" Background="{Binding BorderBackgrounds[11].Value}"/>
                <Border Grid.Column="2" Grid.Row="1" Background="{Binding BorderBackgrounds[12].Value}"/>
                <Border Grid.Column="3" Grid.Row="1" Background="{Binding BorderBackgrounds[13].Value}"/>
                <Border Grid.Column="4" Grid.Row="1" Background="{StaticResource CellBodyBrush}"/>

                <Border Grid.Column="0" Grid.Row="2" Background="{StaticResource CellHeaderBrush}">
                    <TextBlock Text="최종용" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="0" Grid.Row="2"/>
                </Border>
                <Border Grid.Column="1" Grid.Row="2" Background="{Binding BorderBackgrounds[21].Value}"/>
                <Border Grid.Column="2" Grid.Row="2" Background="{Binding BorderBackgrounds[22].Value}"/>
                <Border Grid.Column="3" Grid.Row="2" Background="{Binding BorderBackgrounds[23].Value}"/>
                <Border Grid.Column="4" Grid.Row="2" Background="{StaticResource CellBodyBrush}"/>

                <Border Grid.Column="0" Grid.Row="3" Background="{StaticResource CellHeaderBrush}">
                    <TextBlock Text="출하용" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="0" Grid.Row="2"/>
                </Border>
                <Border Grid.Column="1" Grid.Row="3" Background="{Binding BorderBackgrounds[31].Value}"/>
                <Border Grid.Column="2" Grid.Row="3" Background="{Binding BorderBackgrounds[32].Value}"/>
                <Border Grid.Column="3" Grid.Row="3" Background="{Binding BorderBackgrounds[33].Value}"/>
                <Border Grid.Column="4" Grid.Row="3" Background="{StaticResource CellBodyBrush}"/>
                <!-- 버튼 컨트롤 -->
                <Button Grid.Row="1" Grid.Column="1" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row1_Column1}" Background="Transparent" IsEnabled="{Binding TdCellIsEnabled}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding BlinkingCellIndex}" Value="11">
                                    <DataTrigger.EnterActions>
                                        <!-- 셀이 깜빡일 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard RepeatBehavior="Forever">
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Yellow" Duration="0:0:0.5" AutoReverse="True"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <!-- 깜빡임이 멈출 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Transparent" Duration="0:0:0"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseRightButtonDown">
                            <b:InvokeCommandAction Command="{Binding CellRightClickCommand}" CommandParameter="{x:Static models:CellPositions.Row1_Column1}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
                <Button Grid.Row="1" Grid.Column="2" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row1_Column2}" Background="Transparent" IsEnabled="{Binding TdCellIsEnabled}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding BlinkingCellIndex}" Value="12">
                                    <DataTrigger.EnterActions>
                                        <!-- 셀이 깜빡일 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard RepeatBehavior="Forever">
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Yellow" Duration="0:0:0.5" AutoReverse="True"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <!-- 깜빡임이 멈출 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Transparent" Duration="0:0:0"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseRightButtonDown">
                            <b:InvokeCommandAction Command="{Binding CellRightClickCommand}" CommandParameter="{x:Static models:CellPositions.Row1_Column2}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
                <Button Grid.Row="1" Grid.Column="3" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row1_Column3}" Background="Transparent" IsEnabled="{Binding TdCellIsEnabled}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding BlinkingCellIndex}" Value="13">
                                    <DataTrigger.EnterActions>
                                        <!-- 셀이 깜빡일 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard RepeatBehavior="Forever">
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Yellow" Duration="0:0:0.5" AutoReverse="True"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <!-- 깜빡임이 멈출 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Transparent" Duration="0:0:0"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseRightButtonDown">
                            <b:InvokeCommandAction Command="{Binding CellRightClickCommand}" CommandParameter="{x:Static models:CellPositions.Row1_Column3}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
                <Button Grid.Row="1" Grid.Column="4" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row1_Column4}" Background="Transparent" IsEnabled="{Binding TdCellIsEnabled}"/>

                <Button Grid.Row="2" Grid.Column="1" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row2_Column1}" Background="Transparent" IsEnabled="{Binding TdMdCellIsEnabled}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding BlinkingCellIndex}" Value="21">
                                    <DataTrigger.EnterActions>
                                        <!-- 셀이 깜빡일 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard RepeatBehavior="Forever">
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Yellow" Duration="0:0:0.5" AutoReverse="True"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <!-- 깜빡임이 멈출 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Transparent" Duration="0:0:0"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseRightButtonDown">
                            <b:InvokeCommandAction Command="{Binding CellRightClickCommand}" CommandParameter="{x:Static models:CellPositions.Row2_Column1}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
                <Button Grid.Row="2" Grid.Column="2" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row2_Column2}" Background="Transparent" IsEnabled="{Binding TdMdCellIsEnabled}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding BlinkingCellIndex}" Value="22">
                                    <DataTrigger.EnterActions>
                                        <!-- 셀이 깜빡일 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard RepeatBehavior="Forever">
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Yellow" Duration="0:0:0.5" AutoReverse="True"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <!-- 깜빡임이 멈출 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Transparent" Duration="0:0:0"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseRightButtonDown">
                            <b:InvokeCommandAction Command="{Binding CellRightClickCommand}" CommandParameter="{x:Static models:CellPositions.Row2_Column2}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
                <Button Grid.Row="2" Grid.Column="3" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row2_Column3}" Background="Transparent" IsEnabled="{Binding TdMdCellIsEnabled}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding BlinkingCellIndex}" Value="23">
                                    <DataTrigger.EnterActions>
                                        <!-- 셀이 깜빡일 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard RepeatBehavior="Forever">
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Yellow" Duration="0:0:0.5" AutoReverse="True"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <!-- 깜빡임이 멈출 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Transparent" Duration="0:0:0"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseRightButtonDown">
                            <b:InvokeCommandAction Command="{Binding CellRightClickCommand}" CommandParameter="{x:Static models:CellPositions.Row2_Column3}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
                <Button Grid.Row="2" Grid.Column="4" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row2_Column4}" Background="Transparent" IsEnabled="{Binding TdMdCellIsEnabled}"/>

                <Button Grid.Row="3" Grid.Column="1" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row3_Column1}" Background="Transparent" IsEnabled="{Binding ProbeCellIsEnabled}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding BlinkingCellIndex}" Value="31">
                                    <DataTrigger.EnterActions>
                                        <!-- 셀이 깜빡일 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard RepeatBehavior="Forever">
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Yellow" Duration="0:0:0.5" AutoReverse="True"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <!-- 깜빡임이 멈출 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Transparent" Duration="0:0:0"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseRightButtonDown">
                            <b:InvokeCommandAction Command="{Binding CellRightClickCommand}" CommandParameter="{x:Static models:CellPositions.Row3_Column1}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
                <Button Grid.Row="3" Grid.Column="2" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row3_Column2}" Background="Transparent" IsEnabled="{Binding ProbeCellIsEnabled}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding BlinkingCellIndex}" Value="32">
                                    <DataTrigger.EnterActions>
                                        <!-- 셀이 깜빡일 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard RepeatBehavior="Forever">
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Yellow" Duration="0:0:0.5" AutoReverse="True"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <!-- 깜빡임이 멈출 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Transparent" Duration="0:0:0"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseRightButtonDown">
                            <b:InvokeCommandAction Command="{Binding CellRightClickCommand}" CommandParameter="{x:Static models:CellPositions.Row3_Column2}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
                <Button Grid.Row="3" Grid.Column="3" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row3_Column3}" Background="Transparent" IsEnabled="{Binding ProbeCellIsEnabled}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding BlinkingCellIndex}" Value="33">
                                    <DataTrigger.EnterActions>
                                        <!-- 셀이 깜빡일 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard RepeatBehavior="Forever">
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Yellow" Duration="0:0:0.5" AutoReverse="True"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <!-- 깜빡임이 멈출 때의 애니메이션 효과를 구현합니다. -->
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="Transparent" Duration="0:0:0"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseRightClick">
                            <b:InvokeCommandAction Command="{Binding CellRightClickCommand}" CommandParameter="{x:Static models:CellPositions.Row3_Column3}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
                <Button Grid.Row="3" Grid.Column="4" Width="auto" Height="auto" Command="{Binding CellClickCommand}" CommandParameter="{x:Static models:CellPositions.Row3_Column4}" Background="Transparent" IsEnabled="{Binding ProbeCellIsEnabled}"/>
            </Grid>
        </GroupBox>
        <GroupBox Grid.Row="2" VerticalAlignment="Bottom" Style="{StaticResource RemoveGroupBoxBorder}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Button Grid.Column="0" FontSize="40" Background="LightBlue" Content="검 사" Command="{Binding TestCommand}"/>
                <!--<Border Grid.Column="1" Grid.ColumnSpan="2" BorderBrush="{Binding TestResult, Converter={StaticResource TestResultBorderBrushConverter}}" BorderThickness="2" >-->
                <Border Grid.Column="1" Grid.ColumnSpan="2" BorderBrush="{Binding ValidationDict[TestResult].IsEnabled, Converter={StaticResource TestResultBorderBrushConverter}}" BorderThickness="2" >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <RadioButton Grid.Column="0" Style="{StaticResource RadioButtonLargeStyle}"
                             GroupName="TestResultGroup"
                             Content="FAIL"
                             IsChecked="{Binding TestResult, ConverterParameter=-1, Converter={StaticResource RadioButtonIndexConverter}, Mode=TwoWay}"
                             HorizontalContentAlignment="Center"
                             Background="Tomato"
                             Margin="20,0,0,0"
                             IsEnabled="{Binding ValidationDict[TestResult].IsEnabled}"/>
                        <RadioButton Grid.Column="1" Style="{StaticResource RadioButtonLargeStyle}"
                             GroupName="TestResultGroup"
                             Content="PASS"
                             IsChecked="{Binding TestResult, ConverterParameter=100, Converter={StaticResource RadioButtonIndexConverter}, Mode=TwoWay}"
                             HorizontalContentAlignment="Center"
                             Background="LightGreen"
                             Margin="20,0,0,0"
                             IsEnabled="{Binding ValidationDict[TestResult].IsEnabled}"/>
                    </Grid>
                </Border>
                <Button Grid.Column="3" FontSize="40" Background="LightBlue" Content="다 음" Command="{Binding NextCommand}"/>
            </Grid>
        </GroupBox>
        <GroupBox Grid.Column="1" Grid.RowSpan="2" Style="{StaticResource RemoveGroupBoxBorder}">
            <StackPanel>
                <TextBlock 
                    Text=""
                    FontSize="35" 
                    Foreground="DarkSlateGray"
                    FontFamily="Digital-7"/>
                <Label Style="{StaticResource LabelLargeStyle}"  HorizontalContentAlignment="Center" Margin="0,0,0,15" Content="원 본 이 미 지" />
                <Image x:Name="SrcImg" Margin="60,0,60,0" Stretch="UniformToFill" Source="{Binding SrcImg}"/>
                <!--Source="/Resources/sc_ori_img_512.bmp"/>-->
            </StackPanel>
        </GroupBox>
        
        <GroupBox Style="{StaticResource GroupBoxLargeStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="1" Grid.Row="2" Margin="0,0,0,0" Header="검사 결과">
            <TextBlock Background="Transparent" Margin="10" TextWrapping="Wrap" x:Name="TestResTb" Text="{Binding ResTxt}"/>
        </GroupBox>
        <GroupBox Grid.Column="2" Grid.RowSpan="2" Style="{StaticResource RemoveGroupBoxBorder}">
            <StackPanel>
                <TextBlock 
                    Text="{Binding CurrentTime}"
                    FontSize="35" 
                    Foreground="DarkSlateGray"
                    FontFamily="Digital-7" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                <Grid>
                    <Label Panel.ZIndex="1" Style="{StaticResource LabelLargeStyle}"  HorizontalContentAlignment="Center" Margin="0,0,0,15" Content="결 과 이 미 지"/>
                </Grid>

                <Image x:Name="ResImg" Margin="60,0,60,0" Stretch="UniformToFill" Source="{Binding ResImg}"/>
            </StackPanel>
        </GroupBox>
        
        <GroupBox Style="{StaticResource GroupBoxLargeStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="2" Grid.Row="2" Grid.RowSpan="1" Margin="0,0,0,0" Header="검사 기록">
            <ListBox Margin="15" Padding="10" ItemsSource="{Binding ResLogs}" SelectedItem="{Binding SelectedLogItem}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseDoubleClick">
                        <b:InvokeCommandAction Command="{Binding CopyLogCommand}" CommandParameter="{Binding SelectedLogItem}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <b:Interaction.Behaviors>
                    <behaviors:ScrollToEndBehavior/>
                </b:Interaction.Behaviors>
            </ListBox>
        </GroupBox>
    </Grid>
</Window>
