<Application x:Class="SonoCap.MES.UI.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:ui="clr-namespace:SonoCap.MES.UI" 
             xmlns:views="clr-namespace:SonoCap.MES.UI.Views" 
             xmlns:viewmodels="clr-namespace:SonoCap.MES.UI.ViewModels" 
             xmlns:converters="clr-namespace:SonoCap.MES.UI.Converters"
             xmlns:Behaviors="clr-namespace:SonoCap.MES.UI.Behaviors">
    <Application.Resources>
        <ResourceDictionary>
            <converters:RadioButtonIndexConverter x:Key="RadioButtonIndexConverter" />
            <converters:RowIndexConverter x:Key="RowIndexConverter" />
            <Behaviors:DataGridBehavior x:Key="DataGridBehavior" />
            <Style x:Key="ReadOnlyTextBoxStyle" TargetType="TextBox">
                <Style.Triggers>
                    <Trigger Property="IsReadOnly" Value="True">
                        <Setter Property="Background" Value="LightGray"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="LabelLargeStyle" TargetType="Label">
                <Setter Property="FontSize" Value="40"/>
            </Style>
            <Style x:Key="LabelMediumStyle" TargetType="Label">
                <Setter Property="FontSize" Value="20"/>
            </Style>
            <Style x:Key="GroupBoxLargeStyle" TargetType="GroupBox">
                <Setter Property="FontSize" Value="20"/>
            </Style>
            <Style x:Key="RadioButtonLargeStyle"  TargetType="RadioButton">
                <Setter Property="FontSize" Value="20"/>
                <Setter Property="Foreground" Value="Black"/>
                <!-- 선택 원과 텍스트 사이의 간격 조절 -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="RadioButton">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Ellipse x:Name="RadioButton" Grid.Column="0" Width="20" Height="20" Stroke="Black" StrokeThickness="2" Fill="{TemplateBinding Background}"/>
                                <!-- 간격 조절을 위해 Margin 추가 -->
                                <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}" VerticalAlignment="Center" Margin="10,0,0,0"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <!-- 선택 상태에 따라 배경 색상 변경 -->
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="RadioButton" Property="Fill" Value="Black"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="HintTextBoxStyle" TargetType="TextBox">
                <Style.Resources>
                    <!-- 텍스트가 비었을 때 보이는 힌트 텍스트를 정의합니다. -->
                    <VisualBrush x:Key="CueBannerBrush" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                        <VisualBrush.Visual>
                            <Label Content="검색어를 입력하세요" Foreground="LightGray" />
                        </VisualBrush.Visual>
                    </VisualBrush>
                </Style.Resources>
                <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
                <Style.Triggers>
                    <!-- TextBox가 포커스를 받거나 텍스트가 있는 경우 힌트 텍스트를 숨깁니다. -->
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsFocused" Value="true" />
                            <Condition Property="Text" Value="" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="White" />
                    </MultiTrigger>
                    <Trigger Property="Text" Value="">
                        <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <ResourceDictionary.MergedDictionaries>
                <!--<ResourceDictionary Source="/Styles/BlinkingButtonStyle.xaml"/>-->
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
        
        <!-- DataTemplate을 이용하여 ViewModel과 View를 연결 -->
        <!--<DataTemplate DataType="{x:Type viewmodels:MainViewModel}">
            <views:MainView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:ProbeListViewModel}">
            <views:ProbeListView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:TestListViewModel}">
            <views:TestListView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:TestViewModel}">
            <views:TestView/>
        </DataTemplate>-->
        <!--<ResourceDictionary>
            <vm:ViewModelLocator
                xmlns:vm="clr-namespace:UI.Test.ViewModels"
                x:Key="Locator"
                d:IsDataSource="True" />

            <Style TargetType="Window">
                <Setter Property="FontSize" Value="28" />
            </Style>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/BusyIndicator;component/Theme/Default.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>-->
        
    </Application.Resources>
</Application>
